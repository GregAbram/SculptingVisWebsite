<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>Thrusts | Sculpting Visualizations</title>
    <meta name="description" content="">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://necolas.github.io/normalize.css/8.0.1/normalize.css">
    <link rel="stylesheet" href="css/style.css">
    <script src="js/code.js"></script>
  </head>
  <body>

    <navigation-bar>
      {% include "njk/header.html" %}
    </navigation-bar>

    <thrust-page>

      <thrust-sidebar>
        <div>
          <h1>Applications</h1>
          <h2>Artifact-Based Rendering Software</h2>
          <ul>
            <li><a href="#physicalization">Links</a></li>
            <li><a href="#overview">Artifact-Based Rendering App</a></li>
            <li><a href="#following-po">Tutorials and Instructions</a></li>
          </ul>
        </div>
      </thrust-sidebar>

      <thrust-content>



        <div  id="overview">
          <h2>Artifact-Based Rendering App</h2>

          <p class="big-paragraph">Artifact-Based Rendering (ABR) is a framework that includes tools and processes to enable digital visualizations to incorporate physical media. Created with artists and designers in mind, ABR is a technical foundation and the input channel for Sculpting Visualization’s project to enrich the visual vocabulary of scientific visualization through hand-crafted or naturally occurring objects. ABR bridges key barriers to incorporating artists and designers into visualization teams by enabling them to contribute their visual expertise without spending months learning software tools that currently limit the creative possibilities for their work.</p>


          <div id="tutorials">
            <h2>Tutorials and Instructions</h2>
            <iframe src="https://ivlab.github.io/umn-csci-5609-s22/slides/2-7-abr/" title="ABR Tutorial Slides" width="100%" height="400px"></iframe>

          </div>

          <p>The pipeline for creating a visualization using the ABR application system is divided into three stages: (1) physical design work to craft artifacts; (2) digitizing and translating artifacts for data-driven visualization; (3) creating data-to-visual mappings to implement multivariate interactive visualizations.</p>

          <p>Artifacts are created and curated using four applets: Infinite Line, Glyph Aligner, ColorLoom, and Texture Mapper, in combination with material brought in by the user from the “real world,” such as photographs, sculptures, and sketches.</p>

          <p>Stage 2, digitizing and translating artifacts, begins with capturing the material appearance and/or form of the physical artifacts produced in Stage 1 as digitized artifacts. The capture technique depends on the type of artifact, as well as its intended use. Next, digitized artifacts are translated into vis assets such as colormaps, textures, and glyph meshes that are correctly oriented, down-sampled if necessary, and have normal maps applied for agile rendering.</p>

          <p>Capture methods include photography, scanning, photogrammetry, or digital tools with physical inputs (drawing boards, for example). An open online digital library and underlying database system stores the raw digitized artifacts and associated vis assets.</p>

          <p>Stage 3 of ABR involves implementing data-driven interactive visualizations using the vis assets. To provide structure to these multivariate
          visualizations, we say that each visualization is composed of multiple
          vis layers. These are analogous to the 2D layers used by artists in
          image editing programs, but vis layers are not 2D; they are true 3D
          volumetric constructs. Each vis layer has hooks for connecting vis
          assets to data objects. Thus, after creating a new oriented glyph layer,
          a designer could attach vis assets to define the 3D glyph mesh and
          color map to use for the vis layer and also attach data objects (e.g.,
          density sampled phytoplankton concentration, velocity magnitude) to
          drive color changes. The layers are combined into a final interactive
          visualization, which may be rendered fast enough to optionally display
          in head-tracked, stereoscopic VR.</p>

          <div  id="links">
            <h2>Links</h2>
            <p class="big-paragraph">ABR is Open Source software; the latest releases of the following packages can be found on GitHub:</p>
            <ul>
              <li><a href=https://github.com/ivlab/SculptingVisApp>SculptingVisApp</a></li>
              <li><a href=https://github.com/ivlab/SculptingVisApp>ABREngine Unity Package</a></li>
              <li><a href=https://github.com/ivlab/SculptingVisApp>ABR Python Server</a></li>
              <li><a href=https://github.com/ivlab/SculptingVisApp>ABR Artist-Driven Visualization Schema</a></li>
            </ul>
          </div>

        </div>



      </thrust-content>

      <thrust-footer>
        {% include "njk/footer.html" %}
      </thrust-footer>

    </thrust-page>

    <script src="" async defer></script>
  </body>
</html>
